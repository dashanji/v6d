# Copyright 2020-2022 Alibaba Group Holding Limited.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

setup:
  env: kind
  file: ../kind.yaml
  steps:
    - name: prepare e2e.yaml
      command: bash k8s/hack/prepare-e2e.sh
    - name: pull docker image
      command: |
        docker pull docker.pkg.github.com/v6d-io/v6d/vineyardd:alpine-latest
        docker pull docker.pkg.github.com/v6d-io/v6d/job1
        docker pull docker.pkg.github.com/v6d-io/v6d/job2
        kind load docker-image docker.pkg.github.com/v6d-io/v6d/vineyardd:alpine-latest
        kind load docker-image docker.pkg.github.com/v6d-io/v6d/job1
        kind load docker-image docker.pkg.github.com/v6d-io/v6d/job2
    - name: install scheduler-plugin and operator
      command: |
        make -C k8s docker-build
        kind load docker-image registry-vpc.cn-hongkong.aliyuncs.com/libvineyard/vineyard-controller:latest
        make -C k8s predeploy
        make -C k8s deploy
      wait:
        - namespace: vineyard-system
          resource: deployment/vineyard-controller-manager
          for: condition=Available
    - name: install vineyardd
      command: |
        helm install vineyardd -f k8s/test/e2e/helm-values.yaml ./charts/vineyard -n vineyard-system
        kubectl rollout status --watch --timeout=120s daemonset/vineyardd-sample -n vineyard-system
    - name: install job1
      command: |
        kubectl create namespace vineyard-job
        kubectl apply -f k8s/test/e2e/workflow-job1.yaml
      wait:
        - namespace: vineyard-job
          resource: deployment/v6d-workflow-demo-job1-deployment
          for: condition=Available
    - name: wait globalobjects ready
      command: |
        while [ -z $(kubectl get globalobjects -n vineyard-system -oname)]; \
        do \
          sleep 0.1; \
        done
    - name: label the objects produced by job1
      command: |
        kubectl label localobjects --overwrite --selector=job=none job=v6d-workflow-demo-job1 -n vineyard-system
        kubectl label globalobjects --overwrite --selector=job=none job=v6d-workflow-demo-job1 -n vineyard-system
    - name: install job2
      command: |
        kubectl apply -f k8s/test/e2e/workflow-job2.yaml
      wait:
        - namespace: vineyard-job
          resource: deployment/v6d-workflow-demo-job2-deployment
          for: condition=Available
    - name: label the objects produced by job2
      command: |
        kubectl label localobjects --overwrite --selector=job=none job=v6d-workflow-demo-job2 -n vineyard-system
        kubectl label globalobjects --overwrite --selector=job=none job=v6d-workflow-demo-job2 -n vineyard-system
  timeout: 20m

cleanup:
  # always never success failure
  on: always

verify:
  # verify with retry strategy
  retry:
    # max retry count
    count: 10
    # the interval between two attempts, e.g. 10s, 1m.
    interval: 10s
  cases:
    - query: 'kubectl get po -l app=v6d-workflow-demo-job2 -n vineyard-job -oname | awk -F ''/'' ''{print $2}'' | head -n 1 | xargs kubectl logs -n vineyard-job | yq e ''{"sum": .}'' - | yq e ''to_entries'' -'
      expected: ../verify/values.yaml
    # test the job can only be scheduled on the nodes with the vineyardd
    - query: |
        export job1_nodes=$(kubectl get po -l app=v6d-workflow-demo-job1 -nvineyard-job -o=custom-columns=NODE:.spec.nodeName | awk 'NR != 1' | sort | tr '\n' ' ')
        export job2_nodes=$(kubectl get po -l app=v6d-workflow-demo-job2 -nvineyard-job -o=custom-columns=NODE:.spec.nodeName | awk 'NR != 1' | sort | tr '\n' ' ')
        export vineyardd_nodes=$(kubectl get po -l app.kubernetes.io/instance=vineyardd -n vineyard-system -o=custom-columns=NODE:.spec.nodeName | awk 'NR != 1' | sort | tr '\n' ' ')
        if [ $job1_nodes = $vineyardd_nodes ] && [ $job2_nodes = $vineyardd_nodes ]; then echo '{"AllJobInVineyarddNodes":"true"}' | yq e 'to_entries' -; fi
      expected: ../verify/nodes.yaml
